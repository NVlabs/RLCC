#############################################################################
#
# Traffic Patterns
#

[Config Simult]
description = "start generators in a 1msec window"
sim-time-limit = 1s
**.host[1].gen[0].startTime = 0
**.gen[*].startTime = uniform(50e-3,51e-3)
**.host[1].gen[0].stopTime = 1s
**.gen[*].stopTime  = 900ms
**.startColl = 300ms
**.endColl   = 850ms
**.sched.recoveryStartTime = 900ms

[Config LongSimult]
sim-time-limit = 10000s
description = "start generators in a 1msec window"
**.host[1].gen[0].startTime = 0
**.gen[*].startTime = uniform(1e-3,2e-3)
**.host[1].gen[0].stopTime = 10000s
**.gen[*].stopTime  = 10000s
**.startColl = 0ms
**.endColl   = 0ms
###################################################################################

[Config ManyToOne_Training]
description = "Perform many to one simulation on H hosts Q QPs per host"
**.numSendersHosts = ${SH = 2,4,8,16,32,64}
**.sendQPs = ${Q=1,2,8,16,64,128,256,512,1024}
**.ACKS_AT_LINE_RATE = true
**.numHosts = ${H= ${SH} + 1}
**.host[0].**numQPs =${HQ = (${H}) * ${Q}}
**.numQPs = ${Q}
**.host[0].numGens = ${HQ}
**.numGens = ${Q}
**.host[0].numFlows = ${HQ}*${H}
**.numFlows = ${Q}
**.host[0].gen[*].numPending = 0
**.gen[*].dstHost = 0
**.qp[*].dstQP = index + ${Q} * ancestorIndex(2)

**.gen[*].genFlow = index

constraint = ((${SH}*${Q}) <= 8*1024)

[Config ManyToOne]
description = "Perform many to one simulation on H hosts Q QPs per host"
**.numSendersHosts = ${SH = 2,4,8,16,32,64}
**.sendQPs = ${Q=1,2,8,16,64,128,256,512,1024}
**.numHosts = ${H= ${SH} + 1}
**.host[0].**numQPs =${HQ = (${H}) * ${Q}}
**.numQPs = ${Q}
**.host[0].numGens = ${HQ}
**.numGens = ${Q}
**.host[0].numFlows = ${HQ}*${H}
**.numFlows = ${Q}
**.host[0].gen[*].numPending = 0
**.gen[*].dstHost = 0
**.qp[*].dstQP = index + ${Q} * ancestorIndex(2)
**.gen[*].genFlow = index
constraint = ((${SH}*${Q}) <= 8*1024)

[Config AllToAll_Training]
description="All to all test"
sim-time-limit = 1s
**.ACKS_AT_LINE_RATE = true
#extends = Simult
**.numHosts        = ${H = 2,4,8,16,32,64}#,32}#,64} 
**.OPsPerPair = ${QPP = 4,8,16,32,64,128,256,512,1024}

**.numQPs     =  ${Q = 2*(${H})*${QPP}} # ${Q = 2*(${H}-1)*${QPP}} 
**.numGens = ${Q}
**.numFlows = ${Q}
constraint = ($QPP >= $H) && (($H*$QPP) <= 8*1024)
**.numNetQueues    = ${H}
**.gen[*].dstHost = ${DST = int(index/${QPP})} #(index % (${H}-1)) == parentIndex() ? ${H} - 1 : (index % (${H}-1))}  
**.gen[*].genFlow = index
**.gen[*].numPending = ((${DST}==parentIndex()) || (${DST}>=${H})) ? 0 : 10
**.qp[*].dstQP = ${Q}/2 + ancestorIndex(2)*${QPP} + (index % ${QPP})


[Config AllToAll]
description="All to all test"
sim-time-limit = 1s
#extends = Simult
**.numHosts        = ${H = 2,4,8,16,32,64}#,32}#,64} 
**.OPsPerPair = ${QPP = 4,8,16,32,64,128,256,512,1024} #,2048

**.numQPs     =  ${Q = 2*(${H})*${QPP}}
**.numGens = ${Q}
**.numFlows = ${Q}
**.numNetQueues    = ${H}
**.gen[*].dstHost = ${DST = int(index/${QPP})} #(index % (${H}-1)) == parentIndex() ? ${H} - 1 : (index % (${H}-1))}  
**.gen[*].genFlow = index
**.gen[*].numPending = ((${DST}==parentIndex()) || (${DST}>=${H})) ? 0 : 10
**.qp[*].dstQP = ${Q}/2 + ancestorIndex(2)*${QPP} + (index % ${QPP})
#**.ACKS_AT_LINE_RATE = true

constraint = ($QPP >= $H) && (($H*$QPP) <= 8*1024)

[Config LongShort]
sim-time-limit = 200ms
**.numSendersHosts = ${SH = 2,4,8,16,32, 64}#,128,256,1024}
**.numHosts = ${H= ${SH} + 1}
**.sendQPs = ${Q=8,16,64,128,256,512,1024}
**.gen[*].genFlow = index
**.gen[*].dstHost = 0
constraint = ((${SH}*${Q}) <= 8*1024)

#Reciver
**.host[0].**numQPs =${HQ = (${H}) * ${Q}}
**.host[0].numGens = ${HQ}
**.host[0].numFlows = ${HQ}
**.host[0].gen[*].numPending = 0

#Senders
**.numQPs = ${Q}
**.numGens = ${Q}
**.numFlows = ${Q}
**.qp[*].dstQP = index + ${Q} * ancestorIndex(2)

#Long
**.host[1].gen[*].numPending = (index==0) ? 10 : 0
**.host[1].gen[0].startTime = 0
**.host[1].gen[0].limitData = true
**.host[1].gen[0].streamSize_B = 2e6*1024
**.host[1].gen[0].streams = 1

**.gen[*].numPending = 10
**.gen[*].startTime = uniform(1e-3,1e-3 + 10e-6) #${1e-3 + (int(index/${QI})*(${IT})) + uniform(0,10e-6)}
**.gen[*].stopTime = 200ms
**.gen[*].limitData = true
**.gen[*].streamSize_B = 200*1024
**.gen[*].streams = 6
**.gen[*].timeBetweenStreams = 10ms

**.statCollPeriod = 0.05ms
**.startColl = 5ms
**.endColl = 200ms