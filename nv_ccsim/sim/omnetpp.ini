[General]
network = prog_cc.CCSim
# Enable vector recording per particular instance then disable the rest
**.vector-recording = false
**.appType = "Gen"
############################################################################
[Config Vectors]
description = "Enable vectors recording on all modules"
**.vector-recording = true
#############################################################################
#ALGORITHM PARAMETERS
[Config RL]
**.algoName = "rl"
**.algoLibName = "../lib/librl_release.so"
**.AlgoDefXML = xmldoc("../lib/rl.xml")
**.algoInitName = "rl_init" 

**.PORT_NO_TO_PYTHON = ${5555..6666 step 1}

#############################################################################
# Simulation Type
[Config Eval]
sim-time-limit = 200ms
**.host[1].apps.gen[0].startTime = 0
**.gen[*].startTime = uniform(1e-3,2e-3)
**.host[1].apps.gen[0].stopTime = 199ms
**.gen[*].stopTime  = 170ms
**.startColl = 50ms # only record data after CC algo should converge 
**.endColl   = 170ms

[Config Train]
sim-time-limit = 10000s
description = "start generators in a 1msec window"
**.host[1].gen[0].startTime = 0
**.gen[*].startTime = uniform(1e-3,2e-3)
**.host[1].gen[0].stopTime = 10000s
**.gen[*].stopTime  = 10000s
**.startColl = 0ms
**.endColl   = 0ms

###################################################################################
# Traffic Patterns
[Config ManyToOne]
description = "Perform many to one simulation on H hosts Q QPs per host"
**.numSendersHosts = ${SH = 2,4,8,16,32,64}
**.sendQPs = ${Q=1,2,8,16,64,128,256,512,1024}
**.ACKS_AT_LINE_RATE = true
**.numHosts = ${H= ${SH} + 1}
**.host[0].**numQPs =${HQ = (${H}) * ${Q}}
**.numQPs = ${Q}
**.host[0].numApps = ${HQ}
**.numApps = ${Q}
**.host[0].numFlows = ${HQ}*(${H})*4
**.numFlows = ${Q}*4
**.host[0].apps.gen[*].numPending = 0
**.gen[*].dstHost = 0
**.qp[*].dstQP = index + ${Q} * ancestorIndex(2)
**.gen[*].numPending = 40
**.gen[*].genFlow = index
constraint = ((${SH}*${Q}) <= 8*1024)

[Config AllToAll]
description="Perform all to all simulation on H hosts Q QPs per host"
**.numHosts        = ${H = 2,4,8,16,32,64}
**.OPsPerPair = ${QPP = 4,8,16,32,64,128,256,512,1024}

**.numQPs     =  ${Q = 2*(${H})*${QPP}} 
**.numApps = ${Q}
**.numFlows = ${Q}
**.ACKS_AT_LINE_RATE = true
constraint = ($QPP >= $H) && (($H*$QPP) <= 8*1024)
**.numNetQueues    = ${H}
**.gen[*].dstHost = ${DST = int(index/${QPP})} 
**.gen[*].genFlow = index
**.gen[*].numPending = ((${DST}==ancestorIndex(2)) || (${DST}>=${H})) ? 0 : 30
**.qp[*].dstQP = ${Q}/2 + ancestorIndex(2)*${QPP} + (index % ${QPP})


[Config LongShort]
description="Perform long short simulation - host[1] is the long continuously transmitting QP while other short QPs transmit for a short duration."
**.numSendersHosts = ${SH = 2,4,8,16,32, 64}#,128,256,1024}
**.numHosts = ${H= ${SH} + 1}
**.sendQPs = ${Q=8,16,64,128,256,512,1024}
**.gen[*].genFlow = index
**.gen[*].dstHost = 0
constraint = ((${SH}*${Q}) <= 8*1024)
**.ACKS_AT_LINE_RATE = true
#Reciver
**.host[0].**numQPs =${HQ = (${H}) * ${Q}}
**.host[0].numApps = ${HQ}
**.host[0].numFlows = ${HQ}
**.host[0].apps.gen[*].numPending = 0

#Senders
**.numQPs = ${Q}
**.numApps = ${Q}
**.numFlows = ${Q}
**.qp[*].dstQP = index + ${Q} * ancestorIndex(2)

#Long
**.host[1].apps.gen[*].numPending = (index==0) ? 10 : 0
**.host[1].apps.gen[0].startTime = 0 
**.host[1].apps.gen[0].limitData = true
**.host[1].apps.gen[0].streamSize_B  =  2e6*1024 
**.host[1].apps.gen[0].streams = 1

**.gen[*].numPending = 10
**.gen[*].startTime = uniform(1e-3,1e-3 + 10e-6) 
**.gen[*].stopTime = 200ms 
**.gen[*].limitData = true
**.gen[*].streamSize_B  = 200*1024
**.gen[*].streams = 6
**.gen[*].timeBetweenStreams = 10ms

################################################################################
# Test names
[Config RL_Train_ManyToOne]
description="RL simultanous start many to one"
extends = RL,Train,ManyToOne

[Config RL_Eval_ManyToOne]
description="RL short simultanous start many to one"
extends = RL,Eval,ManyToOne

[Config RL_Eval_ManyToOne_Vectors]
extends =  RL_Eval_ManyToOne,Vectors

[Config RL_Eval_AllToAll]
description="RL short simultanous start all to all"
extends = RL,Eval,AllToAll

[Config RL_Eval_AllToAll_Vectors]
extends =  RL_Eval_AllToAll,Vectors

[Config RL_Train_AllToAll]
description="RL Train all to all"
extends = RL,Train,AllToAll

[Config RL_Eval_LongShort]
sim-time-limit = 200ms
**.statCollPeriod = 0.05ms
**.startColl = 5ms
**.endColl  = 200ms
extends = RL,LongShort

[Config RL_Eval_LongShort_Vectors]
extends = RL_Eval_LongShort,Vectors

[Config RL_Train_LongShort]
sim-time-limit = 10000s
extends = RL,LongShort